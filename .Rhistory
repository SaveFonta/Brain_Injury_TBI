getwd()
import_dataset <- function(...) {
import_list(..., rbind = TRUE, setclass = "data.table")
}
# import Diagnosen data set
Diagnosen <- import_dataset(paste0(import_path,
"[SDS].[v_Export_Diagnosen_tra_sds].csv"))
#Diagnosen is an Excel w/ many sheets. I will import them all
all_data <- import_list(paste0(import_path, "Diagnosen.xlsx"), setclass = "data.table")
# Let's see sheet names
names(all_data)
# Access a specific sheet
Diagnosen2 <- all_data[["(SDS).(v_Export_Diagnosen_tra_s"]]
data1 <- Diagnosen
data2 <- Diagnosen2
# Identify common cols
common_cols <- intersect(names(data1), names(data2))
extra_cols <- setdiff(names(data2), names(data1))
# Order cols (just in case)
data2_ord <- data2[, c(common_cols, extra_cols), with = FALSE]
# Key identifier
key_cols <- c("research_case_id", "Name", "Code")
# Order using key
data1 <- data1 %>% arrange(across(all_of(key_cols)))
data2 <- data2 %>% arrange(across(all_of(key_cols)))
dim(data1)
dim(data2)
#same nmbr of rows, but different columns
# Compare different rows
missing_in_data2 <- anti_join(data1, data2, by = key_cols)
missing_in_data1 <- anti_join(data2, data1, by = key_cols)
dim(missing_in_data2)
dim(missing_in_data1)
# Create a translation dictionary
translation_dict <- c(
"Code" = "Code",
"Dat" = "Date",
"Displayname" = "Display Name",
"Kat" = "Category",
"Name" = "Name",
"research_case_id" = "Research Case ID",
"research_id" = "Research ID",
"Version" = "Version",
"Blutung" = "Bleeding",
"Fraktur" = "Fracture",
"Subduralblutung" = "Subdural Bleeding",
"Epiduralblutung" = "Epidural Bleeding",
"Subarachnoidalblutung" = "Subarachnoid Bleeding",
"Kontusion" = "Contusion",
"Diffuse Hirnverletzungen und Riss/Shearing" = "Diffuse Brain Injuries and Ripping/Shearing",
"Andere Blutungen" = "Other Bleeding",
"Schädelbasisfraktur" = "Skull Base Fracture",
"Schädelkalottenfaktur" = "Skull Cap Fracture",
"Bewusstlosigkeit" = "Unconsciousness",
"Gehrinerschütterung" = "Concussion",
"Hirnödem" = "Brain Edema",
"Compressio cerebri" = "Brain Compression",
"Gehirnerschütterung Korrekturformel" = "Concussion Correction Formula",
"Gehirnerschütterung Korrektur inkl. Bewusstlosigkeit bei SHT" = "Concussion Correction including Unconsciousness in TBI"
)
# Overwrite the column names using the translation dictionary
colnames(Diagnosen2) <- translation_dict[colnames(Diagnosen2)]
# Convert column names to lowercase and replace spaces with underscores
names(Diagnosen2) <- tolower(gsub(" ", "_", names(Diagnosen2)))
# Rename the column to remove special characters (replace / with _)
names(Diagnosen2) <- gsub("/", "_", names(Diagnosen2))
# Convert "Date" column to Date type
Diagnosen2$date <- as.Date(Diagnosen2$date, format = "%Y-%m-%d %H:%M:%S")
#Remove some columns:
#The "code" column i the ICD-10 (cause the "category" column has only one value: ICD10). I removed both columns, if noone is contrary....
Diagnosen2 <- Diagnosen2 %>%
select(-code, -category)
unique(Diagnosen2$version)
#the column "version" contains various version of this ICD. I decided to remove also that column
#Also, consistent with the other script, I only keep the case identifier, not the other one :
Diagnosen2 <- Diagnosen2 %>%
select(-version, -research_id)
#check missing values
table(is.na(Diagnosen2))
# Count NAs per column
na_count_per_column <- colSums(is.na(Diagnosen2))
na_count_per_column[na_count_per_column > 0]  # Display columns with NAs
# Calculate percentage of NA values per column
na_percentage <- colSums(is.na(Diagnosen2)) / nrow(Diagnosen2) * 100
na_percentage[na_percentage > 0]  # Display columns with NAs and their percentage
#the percentage is sooo low. We can inspect these rows.
na_any_column_df <- Diagnosen2[!complete.cases(Diagnosen2), ]
#If we want we can keep them cause the missing is only from Date and a super small part ( 0.02%) from display_name.
#I will remove them for now, I dont think it has a big impact....
#Anyway since some "display_name" miss, we could work with "name" which has 0 missing values. We can discuss it.
# Remove rows with NAs
Diagn_clean <- Diagnosen2[complete.cases(Diagnosen2), ]
# remove duplicate row
Diagn_clean <- unique(Diagn_clean)
# View the cleaned dataframe
head(Diagn_clean)
# Clean up the text data
Diagn_clean$display_name <- tolower(Diagn_clean$display_name)  # Convert to lowercase
Diagn_clean$display_name <- gsub("\\s+", " ", Diagn_clean$display_name)  # Remove extra spaces
Diagn_clean$display_name <- trimws(Diagn_clean$display_name)  # Remove leading and trailing spaces
Diagn_clean$name <- tolower(Diagn_clean$name)  # Convert to lowercase
Diagn_clean$name <- gsub("\\s+", " ", Diagn_clean$name)  # Remove extra spaces
Diagn_clean$name <- trimws(Diagn_clean$name)  # Remove leading and trailing spaces
# Frequency plot for display_name
library(ggplot2)
top_display_names <- as.data.frame(table(Diagn_clean$display_name))
colnames(top_display_names) <- c("display_name", "count")
top_display_names <- top_display_names[order(-top_display_names$count), ]
head(top_display_names, 10)  # Show top 10
ggplot(top_display_names[1:10, ], aes(x = reorder(display_name, -count), y = count)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(title = "Top 10 Most Common Display Names", x = "Display Name", y = "Count")
# Check for duplicate patient IDs
dupes <- Diagn_clean %>%
group_by(research_case_id) %>%
filter(n() > 1)
print(paste("Number of duplicate patient entries:", nrow(dupes)))
names <- Diagn_clean %>% filter(display_name != name) %>% select(display_name, name) %>% unique()
names[1:10,]
#Drop variable name
Diagn_clean <- Diagn_clean %>%
select(-name)
#Aggregates each patient to have a better df
Diagnosis_cleaned <- Diagn_clean %>%
group_by(research_case_id) %>%
summarize(
date = first(date),  # Keep the first date for each individual
bleeding = max(bleeding == 1, na.rm = TRUE),
fracture = max(fracture == 1, na.rm = TRUE),
subdural_bleeding = max(subdural_bleeding == 1, na.rm = TRUE),
epidural_bleeding = max(epidural_bleeding == 1, na.rm = TRUE),
subarachnoid_bleeding = max(subarachnoid_bleeding == 1, na.rm = TRUE),
contusion = max(contusion == 1, na.rm = TRUE),
diffuse_brain_injuries_and_ripping_shearing = max(diffuse_brain_injuries_and_ripping_shearing == 1, na.rm = TRUE),
other_bleeding = max(other_bleeding == 1, na.rm = TRUE),
skull_base_fracture = max(skull_base_fracture == 1, na.rm = TRUE),
skull_cap_fracture = max(skull_cap_fracture == 1, na.rm = TRUE),
unconsciousness = max(unconsciousness == 1, na.rm = TRUE),
concussion = max(concussion == 1, na.rm = TRUE),
brain_edema = max(brain_edema == 1, na.rm = TRUE),
brain_compression = max(brain_compression == 1, na.rm = TRUE),
concussion_correction_formula = max(concussion_correction_formula == 1, na.rm = TRUE),
concussion_correction_including_unconsciousness_in_tbi = max(concussion_correction_including_unconsciousness_in_tbi == 1, na.rm = TRUE),
injury_descriptions = paste(unique(display_name), collapse = ", "),  # Concatenate unique injury descriptions
num_injuries = n_distinct(display_name)  # Count distinct injury descriptions (new col)
)
# Convert binary variables to factors (we could also to logical if we wwant)
Diagnosis_cleaned$bleeding <- as.factor(Diagnosis_cleaned$bleeding)
Diagnosis_cleaned$fracture <- as.factor(Diagnosis_cleaned$fracture)
Diagnosis_cleaned$subdural_bleeding <- as.factor(Diagnosis_cleaned$subdural_bleeding)
Diagnosis_cleaned$epidural_bleeding <- as.factor(Diagnosis_cleaned$epidural_bleeding)
Diagnosis_cleaned$contusion <- as.factor(Diagnosis_cleaned$contusion)
Diagnosis_cleaned$other_bleeding <- as.factor(Diagnosis_cleaned$other_bleeding)
Diagnosis_cleaned$skull_base_fracture <- as.factor(Diagnosis_cleaned$skull_base_fracture)
Diagnosis_cleaned$skull_cap_fracture <- as.factor(Diagnosis_cleaned$skull_cap_fracture)
Diagnosis_cleaned$concussion <- as.factor(Diagnosis_cleaned$concussion)
Diagnosis_cleaned$brain_edema <- as.factor(Diagnosis_cleaned$brain_edema)
Diagnosis_cleaned$brain_compression <- as.factor(Diagnosis_cleaned$brain_compression)
Diagnosis_cleaned$concussion_correction_formula <- as.factor(Diagnosis_cleaned$concussion_correction_formula)
Diagnosis_cleaned$concussion_correction_including_unconsciousness_in_tbi <- as.factor(Diagnosis_cleaned$concussion_correction_including_unconsciousness_in_tbi)
Diagnosis_cleaned$unconsciousness <- as.factor(Diagnosis_cleaned$unconsciousness)
Diagnosis_cleaned$subarachnoid_bleeding <- as.factor(Diagnosis_cleaned$subarachnoid_bleeding)
Diagnosis_cleaned$diffuse_brain_injuries_and_ripping_shearing <- as.factor(Diagnosis_cleaned$diffuse_brain_injuries_and_ripping_shearing)
#save the df
save(Diagnosis_cleaned,
file = paste0(clean_path, "Diagnosis_cleaned.RData"))
rm(list = ls())
clean_path <- "02_data/02_clean_data/"
# for models?
# model_path <- "05_models/"
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(data.table)
library(lme4)      # For mixed effects models
library(lmerTest)  # For p-values in mixed models
library(ggplot2)   # For plotting
library(tidyverse)
library(car)       # For diagnostic plots
library(pROC)      # For ROC curves
knitr::opts_knit$set(root.dir = normalizePath(".."))
poly_temp <- poly %>% drop_na(inr)
qqnorm(poly$temperature, main="Q-Q Plot for Temperature")
qqnorm(poly_temp$temperature, main="Q-Q Plot for Temperature")
poly_temp <- poly %>% drop_na(inr)
poly_temp <- poly %>% drop_na(temp)
rm(list = ls())
clean_path <- "02_data/02_clean_data/"
# for models?
# model_path <- "05_models/"
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(data.table)
library(lme4)      # For mixed effects models
library(lmerTest)  # For p-values in mixed models
library(ggplot2)   # For plotting
library(tidyverse)
library(car)       # For diagnostic plots
library(pROC)      # For ROC curves
knitr::opts_knit$set(root.dir = normalizePath(".."))
poly <- readRDS(paste0(clean_path, "population_poly.rds"))
poly <- poly %>% select(research_case_id, bp, hr, temperature, inr, iss, iss_cat, invasive,
gcs, gcs_cat, sex, age, age_cat, bleeding, fracture, concussion,
brain_edema, brain_compression, unconsciousness)
# What to do with NA's?
# For heart rate and blood pressure must be documentation mistakes (always measured), so I exclude them in the analysis
poly <- poly %>% drop_na(bp, hr)
# Also, a HR of 865 seems hardly normal, take it out
poly <- poly %>% filter(hr < 250)
# For temp and inr missing probably indicates no problem and thus not measured. I will try to fit a model where I remove the NA's and another model where I convert the variables to ordered factors and classify NA's as in normal range (ASSUMPTION!).
# Create long-format dataset for BP and HR (hemorrhage)
poly_hemo <- melt(poly,
id.vars = c("research_case_id", "gcs_cat", "iss_cat", "invasive",
"sex", "age_cat", "bleeding", "fracture", "concussion",
"brain_edema", "brain_compression", "unconsciousness"),
measure.vars = c("bp", "hr"),
variable.name = "vital_sign",
value.name = "value")
# Create combined GCS and vital sign variable
poly_hemo[, gcs_vital := paste(gcs_cat, vital_sign, sep = "_")]
# Distribution of ordered factors
table(poly$gcs_cat)
table(poly$iss_cat)
table(poly$age_cat)
# Summary statistics of key variables
summary(poly[, .(bp, hr, temperature, inr)])
# Check missing values in key variables
missing_values <- colSums(is.na(poly))
print(missing_values)
# Distribution of key outcome variables
par(mfrow=c(2,2))
hist(poly$bp, main="Blood Pressure Distribution", xlab="BP")
hist(poly$hr, main="Heart Rate Distribution", xlab="HR")
hist(poly$temperature, main="Temperature Distribution", xlab="Temperature")
hist(poly$inr, main="INR Distribution", xlab="INR")
par(mfrow=c(1,1))
# Examine relationships between ordered factors and outcomes
boxplot(bp ~ gcs_cat, data = poly,
main = "Blood Pressure by GCS Category", xlab = "GCS Category", ylab = "BP")
boxplot(hr ~ gcs_cat, data = poly,
main = "Heart Rate by GCS Category", xlab = "GCS Category", ylab = "HR")
boxplot(temperature ~ gcs_cat, data = poly,
main = "Temperature by GCS Category", xlab = "GCS Category", ylab = "Temperature")
boxplot(inr ~ gcs_cat, data = poly,
main = "INR by GCS Category", xlab = "GCS Category", ylab = "INR")
model1 <- lmer(value ~ vital_sign * gcs_cat + iss_cat + invasive + sex + age_cat +
bleeding + fracture + concussion + brain_edema + brain_compression +
unconsciousness + (1|research_case_id), data = poly_hemo)
# Alternative model with sex interaction
model1_sex <- lmer(value ~ vital_sign * gcs_cat + vital_sign * sex + iss_cat + invasive +
age_cat + bleeding + fracture + concussion + brain_edema +
brain_compression + unconsciousness + (1|research_case_id),
data = poly_hemo)
# Model summaries
summary(model1)
summary(model1_sex)
# Compare models
anova(model1, model1_sex)
plot(model1) # Looks ok
qqnorm(resid(model1), main="Q-Q Plot of Residuals")
qqline(resid(model1))
# Half-normal plot of residuals (approximation using car package)
car::qqPlot(resid(model1), distribution="norm", envelope=0.95,
main="Half-Normal Plot of Residuals", ylab="Residuals")
# Predictions
poly_hemo$predicted <- predict(model1, newdata = poly_hemo, allow.new.levels = TRUE, re.form = NULL)  # Include random effects
# Plot predicted vs observed
ggplot(poly_hemo, aes(x=value, y=predicted)) +
geom_point(alpha=0.5) +
geom_abline(intercept=0, slope=1, color="red") +
facet_wrap(~vital_sign, scales="fixed") +
labs(title="Predicted vs Observed Values", x="Observed", y="Predicted") +
theme_minimal()
# Examine interaction effects with ordered factors
ggplot(poly_hemo, aes(x=gcs_cat, y=value, fill=vital_sign)) +
geom_boxplot() +
facet_wrap(~vital_sign, scales="free_y") +
labs(title="BP and HR by GCS Category", x="GCS Category", y="Value") +
theme_minimal()
model1_log <- lmer(log(value + 0.0001) ~ vital_sign * gcs_cat + iss_cat + invasive + sex +
age_cat + bleeding + fracture + concussion + brain_edema +
brain_compression + unconsciousness + (1|research_case_id),
data = poly_hemo)
summary(model1_log)
anova(model1, model1_log)
# Some Diagnostics
plot(model1_log)
qqnorm(resid(model1_log), main="Q-Q Plot of Residuals")
qqline(resid(model1_log))
# Half-normal plot of residuals (approximation using car package)
car::qqPlot(resid(model1), distribution="norm", envelope=0.95,
main="Half-Normal Plot of Residuals", ylab="Residuals")
# Predictions
poly_hemo$predicted_log <- predict(model1_log, newdata = poly_hemo, allow.new.levels = TRUE, re.form = NULL)  # Include random effects
poly_hemo$predicted_log_trafo <- exp(poly_hemo$predicted_log) - 0.0001
# Plot predicted vs observed
ggplot(poly_hemo, aes(x=value, y=predicted_log_trafo)) +
geom_point(alpha=0.5) +
geom_abline(intercept=0, slope=1, color="red") +
facet_wrap(~vital_sign, scales="fixed") +
labs(title="Predicted vs Observed Values", x="Observed", y="Predicted") +
theme_minimal()
# TODO
# wrong ones before
poly_temp <- poly %>% drop_na(temp)
names(poly)
poly_temp <- poly %>% drop_na(temperature)
qqnorm(poly_temp$temperature, main="Q-Q Plot for Temperature")
qqline(poly_temp$temperature)
qqnorm(log(poly_temp$temperature), main="Q-Q Plot for Temperature")
qqline(log(poly_temp$temperature))
model2 <- lm(temperature ~ gcs_cat + iss_cat + invasive + sex + age_cat +
bleeding + fracture + concussion + brain_edema + brain_compression +
unconsciousness, data = poly_temp)
summary(model2)
plot(model2)
par(mfrow=c(2,2))
plot(model2)
par(mfrow=c(1,1))
poly_temp <- poly %>% drop_na(temperature)
qqnorm(poly_temp$temperature, main="Q-Q Plot for Temperature")
qqline(poly_temp$temperature)
model2 <- lm(log(temperature) ~ gcs_cat + iss_cat + invasive + sex + age_cat +
bleeding + fracture + concussion + brain_edema + brain_compression +
unconsciousness, data = poly_temp)
summary(model2)
# Figure out what to do with NA --> make one model with removed
# --> one model with categories
par(mfrow=c(2,2))
plot(model2)
par(mfrow=c(1,1))
# Predictions
poly$temp_predicted <- predict(better_model2, poly)
# Predictions
poly_temp$temp_predicted <- predict(model2, poly)
# Predictions
poly_temp$temp_predicted <- predict(model2, poly_temp)
# Plot predicted vs observed
ggplot(poly, aes(x=temperature, y=temp_predicted)) +
geom_point(alpha=0.5) +
geom_abline(intercept=0, slope=1, color="red") +
labs(title="Predicted vs Observed Temperature", x="Observed", y="Predicted") +
theme_minimal()
# Predictions
poly_temp$temp_predicted <- predict(model2, poly_temp)
# Plot predicted vs observed
ggplot(poly_temp, aes(x=temperature, y=temp_predicted)) +
geom_point(alpha=0.5) +
geom_abline(intercept=0, slope=1, color="red") +
labs(title="Predicted vs Observed Temperature", x="Observed", y="Predicted") +
theme_minimal()
ggplot(poly_temp, aes(x=temperature, y=temp_predicted)) +
geom_point(alpha=0.5) +
geom_abline(intercept=0, slope=1, color="red") +
labs(title="Predicted vs Observed Temperature", x="Observed", y="Predicted") +
theme_minimal()
# Examine effects of ordered factors
ggplot(poly_temp, aes(x=gcs_cat, y=temperature)) +
geom_boxplot() +
labs(title="Temperature by GCS Category", x="GCS Category", y="Temperature") +
theme_minimal()
ggplot(poly_temp, aes(x=iss_cat, y=temperature)) +
geom_boxplot() +
labs(title="Temperature by ISS Category", x="ISS Category", y="Temperature") +
theme_minimal()
ggplot(poly_temp, aes(x=gcs_cat, y=temperature)) +
geom_boxplot() +
labs(title="Temperature by GCS Category", x="GCS Category", y="Temperature") +
theme_minimal()
ggplot(poly_temp, aes(x=iss_cat, y=temperature)) +
geom_boxplot() +
labs(title="Temperature by ISS Category", x="ISS Category", y="Temperature") +
theme_minimal()
ggplot(poly_temp, aes(x=age_cat, y=temperature)) +
geom_boxplot() +
labs(title="Temperature by Age Category", x="Age Category", y="Temperature") +
theme_minimal()
model3 <- lm(inr ~ gcs_cat + iss_cat + invasive + sex + age_cat +
bleeding + fracture + concussion + brain_edema + brain_compression +
unconsciousness, data = poly)
model3 <- lm(inr ~ gcs_cat + iss_cat + invasive + sex + age_cat +
bleeding + fracture + concussion + brain_edema + brain_compression +
unconsciousness, data = poly_inr)
poly_inr <- poly %>% drop_na(inr)
model3 <- lm(inr ~ gcs_cat + iss_cat + invasive + sex + age_cat +
bleeding + fracture + concussion + brain_edema + brain_compression +
unconsciousness, data = poly_inr)
summary(model3)
poly_inr <- poly %>% drop_na(inr)
model3 <- lm(inr ~ gcs_cat + iss_cat + invasive + sex + age_cat +
bleeding + fracture + concussion + brain_edema + brain_compression +
unconsciousness, data = poly_inr)
model3_log <- lm(log(inr + 0.0001) ~ gcs_cat + iss_cat + invasive + sex + age_cat +
bleeding + fracture + concussion + brain_edema + brain_compression +
unconsciousness, data = poly_inr)
# Model summaries
summary(model3)
summary(model3_log)
anova(model3, model3_log)
model3_log <- lm(log(inr + 0.0001) ~ gcs_cat + iss_cat + invasive + sex + age_cat +
bleeding + fracture + concussion + brain_edema + brain_compression +
unconsciousness, data = poly_inr)
summary(model3_log)
anova(model3, model3_log)
model3 <- lm(inr ~ gcs_cat + iss_cat + invasive + sex + age_cat +
bleeding + fracture + concussion + brain_edema + brain_compression +
unconsciousness, data = poly_inr)
model3_log <- lm(log(inr + 0.0001) ~ gcs_cat + iss_cat + invasive + sex + age_cat +
bleeding + fracture + concussion + brain_edema + brain_compression +
unconsciousness, data = poly_inr)
anova(model3, model3_log)
anova(model3, model3_log)
summary(model3_log)
par(mfrow=c(2,2))
plot(model3)
par(mfrow=c(1,1))
ggplot(poly, aes(x=gcs_cat, y=inr)) +
geom_boxplot() +
labs(title="INR by GCS Category", x="GCS Category", y="INR") +
theme_minimal()
model3_robust <- rlm(log(inr + 0.01) ~ gcs_cat + iss_cat + invasive + sex + age_cat +
bleeding + fracture + concussion + brain_edema + brain_compression +
unconsciousness, data = poly_inr)
library(MASS)
model3_robust <- rlm(log(inr + 0.01) ~ gcs_cat + iss_cat + invasive + sex + age_cat +
bleeding + fracture + concussion + brain_edema + brain_compression +
unconsciousness, data = poly_inr)
plot(model3_robust)
model3_gamma <- glm(inr ~ gcs_cat + iss_cat + invasive + sex + age_cat +
bleeding + fracture + concussion + brain_edema + brain_compression +
unconsciousness, data = poly_inr, family = Gamma(link = "log"))
plot(model3_gamma)
# Check for extreme values
summary(poly$inr)
boxplot(poly$inr)
boxplot(log(poly$inr))
# Check for extreme values
summary(poly$inr)
boxplot(poly$inr)
boxplot(log(poly$inr))
rm(list = ls())
clean_path <- "02_data/02_clean_data/"
# for models?
# model_path <- "05_models/"
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(data.table)
library(lme4)      # For mixed effects models
library(lmerTest)  # For p-values in mixed models
library(ggplot2)   # For plotting
library(tidyverse)
library(car)       # For diagnostic plots
library(pROC)      # For ROC curves
knitr::opts_knit$set(root.dir = normalizePath(".."))
poly <- readRDS(paste0(clean_path, "population_poly.rds"))
poly <- poly %>% select(research_case_id, bp, hr, temperature, inr, iss, iss_cat, invasive,
gcs, gcs_cat, sex, age, age_cat, bleeding, fracture, concussion,
brain_edema, brain_compression, unconsciousness)
rm(list = ls())
clean_path <- "02_data/02_clean_data/"
# for models?
# model_path <- "05_models/"
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(data.table)
library(lme4)      # For mixed effects models
library(lmerTest)  # For p-values in mixed models
library(ggplot2)   # For plotting
library(tidyverse)
library(car)       # For diagnostic plots
library(pROC)      # For ROC curves
knitr::opts_knit$set(root.dir = normalizePath(".."))
poly <- readRDS(paste0(clean_path, "population_poly.rds"))
poly <- poly %>% select(research_case_id, bp, hr, temperature, inr, iss, iss_cat, invasive,
gcs, gcs_cat, sex, age, age_cat, bleeding, fracture, concussion,
brain_edema, brain_compression, unconsciousness)
rm(list = ls())
clean_path <- "02_data/02_clean_data/"
# for models?
# model_path <- "05_models/"
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(data.table)
library(lme4)      # For mixed effects models
library(lmerTest)  # For p-values in mixed models
library(ggplot2)   # For plotting
library(tidyverse)
library(car)       # For diagnostic plots
library(pROC)      # For ROC curves
knitr::opts_knit$set(root.dir = normalizePath(".."))
poly <- readRDS(paste0(clean_path, "population_poly.rds"))
poly <- poly %>% select(research_case_id, bp, hr, temperature, inr, iss, iss_cat, invasive,
gcs, gcs_cat, sex, age, age_cat, bleeding, fracture, concussion,
brain_edema, brain_compression, unconsciousness)
poly <- readRDS(paste0(clean_path, "population_poly.rds"))
poly <- poly %>% select(research_case_id, bp, hr, temperature, inr, iss, iss_cat,
invasive, gcs, gcs_cat, sex, age, age_cat, bleeding, fracture,
concussion, brain_edema, brain_compression, unconsciousness)
poly <- readRDS(paste0(clean_path, "population_poly.rds"))
names(poly)
rm(list = ls())
clean_path <- "02_data/02_clean_data/"
# for models?
# model_path <- "05_models/"
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(data.table)
library(lme4)      # For mixed effects models
library(lmerTest)  # For p-values in mixed models
library(ggplot2)   # For plotting
library(tidyverse)
library(car)       # For diagnostic plots
library(pROC)      # For ROC curves
knitr::opts_knit$set(root.dir = normalizePath(".."))
poly <- readRDS(paste0(clean_path, "population_poly.rds"))
poly <- poly %>% select(research_case_id, bp, hr, temperature, inr, iss, iss_cat,
invasive, gcs, gcs_cat, sex, age, age_cat, bleeding, fracture,
concussion, brain_edema, brain_compression, unconsciousness)
