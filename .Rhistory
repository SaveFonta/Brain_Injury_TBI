# for export of clean data
clean_path <- "02_data/02_clean_data/"
library(data.table)
library(rio)
library(dplyr)
library(tidyr)
#knitr::opts_chunk$set(echo = TRUE)
# Permanently set working directory to parent folder for all chunks
#knitr::opts_knit$set(root.dir = normalizePath(".."))
getwd()
# define paths
# for data import
import_path <- "02_data/01_raw_data/"
# for export of inspection objects (spreadsheets)
inspect_path <- "03_spreadsheets/"
# for export of clean data
clean_path <- "02_data/02_clean_data/"
library(data.table)
library(rio)
library(dplyr)
library(tidyr)
#knitr::opts_chunk$set(echo = TRUE)
# Permanently set working directory to parent folder for all chunks
knitr::opts_knit$set(root.dir = normalizePath(".."))
getwd()
# function for data import from .csv files
getwd()
import_dataset <- function(...) {
import_list(..., rbind = TRUE, setclass = "data.table")
}
# import Diagnosen data set
Diagnosen <- import_dataset(paste0(import_path,
"[SDS].[v_Export_Diagnosen_tra_sds].csv"))
#Diagnosen is an Excel w/ many sheets. I will import them all
all_data <- import_list(paste0(import_path, "Diagnosen.xlsx"), setclass = "data.table")
# Let's see sheet names
names(all_data)
# Access a specific sheet
Diagnosen2 <- all_data[["(SDS).(v_Export_Diagnosen_tra_s"]]
# define paths
# for data import
import_path <- "02_data/01_raw_data/"
# for export of inspection objects (spreadsheets)
inspect_path <- "03_spreadsheets/"
# for export of clean data
clean_path <- "02_data/02_clean_data/"
library(data.table)
library(rio)
library(dplyr)
library(tidyr)
knitr::opts_chunk$set(echo = TRUE)
# Permanently set working directory to parent folder for all chunks
knitr::opts_knit$set(root.dir = normalizePath(".."))
getwd()
# define paths
# for data import
import_path <- "02_data/01_raw_data/"
# for export of inspection objects (spreadsheets)
inspect_path <- "03_spreadsheets/"
# for export of clean data
clean_path <- "02_data/02_clean_data/"
library(data.table)
library(rio)
library(dplyr)
library(tidyr)
knitr::opts_chunk$set(echo = TRUE)
# Permanently set working directory to parent folder for all chunks
knitr::opts_knit$set(root.dir = normalizePath(".."))
getwd()
# define paths
# for data import
import_path <- "02_data/01_raw_data/"
# for export of inspection objects (spreadsheets)
inspect_path <- "03_spreadsheets/"
# for export of clean data
clean_path <- "02_data/02_clean_data/"
library(data.table)
library(rio)
library(dplyr)
library(tidyr)
knitr::opts_chunk$set(echo = TRUE)
# Permanently set working directory to parent folder for all chunks
knitr::opts_knit$set(root.dir = normalizePath(".."))
getwd()
# define paths
# for data import
import_path <- "02_data/01_raw_data/"
# for export of inspection objects (spreadsheets)
inspect_path <- "03_spreadsheets/"
# for export of clean data
clean_path <- "02_data/02_clean_data/"
library(data.table)
library(rio)
library(dplyr)
library(tidyr)
knitr::opts_chunk$set(echo = TRUE)
# Permanently set working directory to parent folder for all chunks
knitr::opts_knit$set(root.dir = normalizePath(".."))
getwd()
# define paths
# for data import
import_path <- "02_data/01_raw_data/"
# for export of inspection objects (spreadsheets)
inspect_path <- "03_spreadsheets/"
# for export of clean data
clean_path <- "02_data/02_clean_data/"
library(data.table)
library(rio)
library(dplyr)
library(tidyr)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
# Permanently set working directory to parent folder for all chunks
knitr::opts_knit$set(root.dir = normalizePath(".."))
getwd()
# define paths
# for data import
import_path <- "02_data/01_raw_data/"
# for export of inspection objects (spreadsheets)
inspect_path <- "03_spreadsheets/"
# for export of clean data
clean_path <- "02_data/02_clean_data/"
library(data.table)
library(rio)
library(dplyr)
library(tidyr)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
# Permanently set working directory to parent folder for all chunks
knitr::opts_knit$set(root.dir = normalizePath(".."))
getwd()
# define paths
# for data import
import_path <- "02_data/01_raw_data/"
# for export of inspection objects (spreadsheets)
inspect_path <- "03_spreadsheets/"
# for export of clean data
clean_path <- "02_data/02_clean_data/"
library(data.table)
library(rio)
library(dplyr)
library(tidyr)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
# Permanently set working directory to parent folder for all chunks
knitr::opts_knit$set(root.dir = normalizePath(".."))
getwd()
# define paths
# for data import
import_path <- "02_data/01_raw_data/"
# for export of inspection objects (spreadsheets)
inspect_path <- "03_spreadsheets/"
# for export of clean data
clean_path <- "02_data/02_clean_data/"
library(data.table)
library(rio)
library(dplyr)
library(tidyr)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
# Permanently set working directory to parent folder for all chunks
knitr::opts_knit$set(root.dir = normalizePath(".."))
getwd()
# define paths
# for data import
import_path <- "02_data/01_raw_data/"
# for export of inspection objects (spreadsheets)
inspect_path <- "03_spreadsheets/"
# for export of clean data
clean_path <- "02_data/02_clean_data/"
library(data.table)
library(rio)
library(dplyr)
library(tidyr)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
# Permanently set working directory to parent folder for all chunks
knitr::opts_knit$set(root.dir = normalizePath(".."))
getwd()
# define paths
# for data import
import_path <- "02_data/01_raw_data/"
# for export of inspection objects (spreadsheets)
inspect_path <- "03_spreadsheets/"
# for export of clean data
clean_path <- "02_data/02_clean_data/"
library(data.table)
library(rio)
library(dplyr)
library(tidyr)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
# Permanently set working directory to parent folder for all chunks
knitr::opts_knit$set(root.dir = normalizePath(".."))
getwd()
# define paths
# for data import
import_path <- "02_data/01_raw_data/"
# for export of inspection objects (spreadsheets)
inspect_path <- "03_spreadsheets/"
# for export of clean data
clean_path <- "02_data/02_clean_data/"
library(data.table)
library(rio)
library(dplyr)
library(tidyr)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
# Permanently set working directory to parent folder for all chunks
knitr::opts_knit$set(root.dir = normalizePath(".."))
getwd()
# define paths
# for data import
import_path <- "02_data/01_raw_data/"
# for export of inspection objects (spreadsheets)
inspect_path <- "03_spreadsheets/"
# for export of clean data
clean_path <- "02_data/02_clean_data/"
library(data.table)
library(rio)
library(dplyr)
library(tidyr)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
# Permanently set working directory to parent folder for all chunks
knitr::opts_knit$set(root.dir = normalizePath(".."))
getwd()
# define paths
# for data import
import_path <- "02_data/01_raw_data/"
# for export of inspection objects (spreadsheets)
inspect_path <- "03_spreadsheets/"
# for export of clean data
clean_path <- "02_data/02_clean_data/"
library(data.table)
library(rio)
library(dplyr)
library(tidyr)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
# Permanently set working directory to parent folder for all chunks
knitr::opts_knit$set(root.dir = normalizePath(".."))
getwd()
# define paths
# for data import
import_path <- "02_data/01_raw_data/"
# for export of inspection objects (spreadsheets)
inspect_path <- "03_spreadsheets/"
# for export of clean data
clean_path <- "02_data/02_clean_data/"
library(data.table)
library(rio)
library(dplyr)
library(tidyr)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
# Permanently set working directory to parent folder for all chunks
knitr::opts_knit$set(root.dir = normalizePath(".."))
getwd()
# define paths
# for data import
import_path <- "02_data/01_raw_data/"
# for export of inspection objects (spreadsheets)
inspect_path <- "03_spreadsheets/"
# for export of clean data
clean_path <- "02_data/02_clean_data/"
library(data.table)
library(rio)
library(dplyr)
library(tidyr)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
# Permanently set working directory to parent folder for all chunks
knitr::opts_knit$set(root.dir = normalizePath(".."))
getwd()
# define paths
# for data import
import_path <- "02_data/01_raw_data/"
# for export of inspection objects (spreadsheets)
inspect_path <- "03_spreadsheets/"
# for export of clean data
clean_path <- "02_data/02_clean_data/"
library(data.table)
library(rio)
library(dplyr)
library(tidyr)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
# Permanently set working directory to parent folder for all chunks
knitr::opts_knit$set(root.dir = normalizePath(".."))
getwd()
# Verify the working directory changed
cat("New working directory:", getwd())
# define paths
# for data import
import_path <- "02_data/01_raw_data/"
# for export of inspection objects (spreadsheets)
inspect_path <- "03_spreadsheets/"
# for export of clean data
clean_path <- "02_data/02_clean_data/"
library(data.table)
library(rio)
library(dplyr)
library(tidyr)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
# Permanently set working directory to parent folder for all chunks
knitr::opts_knit$set(root.dir = normalizePath(".."))
#Drop variable name
Diagn_clean <- Diagn_clean %>%
select(-name)
# define paths
# for data import
import_path <- "02_data/01_raw_data/"
# for export of inspection objects (spreadsheets)
inspect_path <- "03_spreadsheets/"
# for export of clean data
clean_path <- "02_data/02_clean_data/"
library(data.table)
library(rio)
library(dplyr)
library(tidyr)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
# Permanently set working directory to parent folder for all chunks
knitr::opts_knit$set(root.dir = normalizePath(".."))
setwd(normalizePath(".."))
# define paths
# for data import
import_path <- "02_data/01_raw_data/"
# for export of inspection objects (spreadsheets)
inspect_path <- "03_spreadsheets/"
# for export of clean data
clean_path <- "02_data/02_clean_data/"
library(data.table)
library(rio)
library(dplyr)
library(tidyr)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
# Permanently set working directory to parent folder for all chunks
knitr::opts_knit$set(root.dir = normalizePath(".."))
#check missing values
table(is.na(Diagnosen2))
# function for data import from .csv files
getwd()
import_dataset <- function(...) {
import_list(..., rbind = TRUE, setclass = "data.table")
}
# import Diagnosen data set
Diagnosen <- import_dataset(paste0(import_path,
"[SDS].[v_Export_Diagnosen_tra_sds].csv"))
#Diagnosen is an Excel w/ many sheets. I will import them all
all_data <- import_list(paste0(import_path, "Diagnosen.xlsx"), setclass = "data.table")
# Let's see sheet names
names(all_data)
# Access a specific sheet
Diagnosen2 <- all_data[["(SDS).(v_Export_Diagnosen_tra_s"]]
data1 <- Diagnosen
data2 <- Diagnosen2
# Identify common cols
common_cols <- intersect(names(data1), names(data2))
extra_cols <- setdiff(names(data2), names(data1))
# Order cols (just in case)
data2_ord <- data2[, c(common_cols, extra_cols), with = FALSE]
# Key identifier
key_cols <- c("research_case_id", "Name", "Code")
# Order using key
data1 <- data1 %>% arrange(across(all_of(key_cols)))
data2 <- data2 %>% arrange(across(all_of(key_cols)))
dim(data1)
dim(data2)
#same nmbr of rows, but different columns
# Compare different rows
missing_in_data2 <- anti_join(data1, data2, by = key_cols)
missing_in_data1 <- anti_join(data2, data1, by = key_cols)
dim(missing_in_data2)
dim(missing_in_data1)
# Create a translation dictionary
translation_dict <- c(
"Code" = "Code",
"Dat" = "Date",
"Displayname" = "Display Name",
"Kat" = "Category",
"Name" = "Name",
"research_case_id" = "Research Case ID",
"research_id" = "Research ID",
"Version" = "Version",
"Blutung" = "Bleeding",
"Fraktur" = "Fracture",
"Subduralblutung" = "Subdural Bleeding",
"Epiduralblutung" = "Epidural Bleeding",
"Subarachnoidalblutung" = "Subarachnoid Bleeding",
"Kontusion" = "Contusion",
"Diffuse Hirnverletzungen und Riss/Shearing" = "Diffuse Brain Injuries and Ripping/Shearing",
"Andere Blutungen" = "Other Bleeding",
"Schädelbasisfraktur" = "Skull Base Fracture",
"Schädelkalottenfaktur" = "Skull Cap Fracture",
"Bewusstlosigkeit" = "Unconsciousness",
"Gehrinerschütterung" = "Concussion",
"Hirnödem" = "Brain Edema",
"Compressio cerebri" = "Brain Compression",
"Gehirnerschütterung Korrekturformel" = "Concussion Correction Formula",
"Gehirnerschütterung Korrektur inkl. Bewusstlosigkeit bei SHT" = "Concussion Correction including Unconsciousness in TBI"
)
# Overwrite the column names using the translation dictionary
colnames(Diagnosen2) <- translation_dict[colnames(Diagnosen2)]
# Convert column names to lowercase and replace spaces with underscores
names(Diagnosen2) <- tolower(gsub(" ", "_", names(Diagnosen2)))
# Rename the column to remove special characters (replace / with _)
names(Diagnosen2) <- gsub("/", "_", names(Diagnosen2))
# Convert "Date" column to Date type
Diagnosen2$date <- as.Date(Diagnosen2$date, format = "%Y-%m-%d %H:%M:%S")
#Remove some columns:
#The "code" column i the ICD-10 (cause the "category" column has only one value: ICD10). I removed both columns, if noone is contrary....
Diagnosen2 <- Diagnosen2 %>%
select(-code, -category)
unique(Diagnosen2$version)
#the column "version" contains various version of this ICD. I decided to remove also that column
#Also, consistent with the other script, I only keep the case identifier, not the other one :
Diagnosen2 <- Diagnosen2 %>%
select(-version, -research_id)
#check missing values
table(is.na(Diagnosen2))
# Count NAs per column
na_count_per_column <- colSums(is.na(Diagnosen2))
na_count_per_column[na_count_per_column > 0]  # Display columns with NAs
# Calculate percentage of NA values per column
na_percentage <- colSums(is.na(Diagnosen2)) / nrow(Diagnosen2) * 100
na_percentage[na_percentage > 0]  # Display columns with NAs and their percentage
#the percentage is sooo low. We can inspect these rows.
na_any_column_df <- Diagnosen2[!complete.cases(Diagnosen2), ]
#If we want we can keep them cause the missing is only from Date and a super small part ( 0.02%) from display_name.
#I will remove them for now, I dont think it has a big impact....
#Anyway since some "display_name" miss, we could work with "name" which has 0 missing values. We can discuss it.
# Remove rows with NAs
Diagn_clean <- Diagnosen2[complete.cases(Diagnosen2), ]
# remove duplicate row
Diagn_clean <- unique(Diagn_clean)
# View the cleaned dataframe
head(Diagn_clean)
# Clean up the text data
Diagn_clean$display_name <- tolower(Diagn_clean$display_name)  # Convert to lowercase
Diagn_clean$display_name <- gsub("\\s+", " ", Diagn_clean$display_name)  # Remove extra spaces
Diagn_clean$display_name <- trimws(Diagn_clean$display_name)  # Remove leading and trailing spaces
Diagn_clean$name <- tolower(Diagn_clean$name)  # Convert to lowercase
Diagn_clean$name <- gsub("\\s+", " ", Diagn_clean$name)  # Remove extra spaces
Diagn_clean$name <- trimws(Diagn_clean$name)  # Remove leading and trailing spaces
# Frequency plot for display_name
library(ggplot2)
top_display_names <- as.data.frame(table(Diagn_clean$display_name))
colnames(top_display_names) <- c("display_name", "count")
top_display_names <- top_display_names[order(-top_display_names$count), ]
head(top_display_names, 10)  # Show top 10
ggplot(top_display_names[1:10, ], aes(x = reorder(display_name, -count), y = count)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(title = "Top 10 Most Common Display Names", x = "Display Name", y = "Count")
# Check for duplicate patient IDs
dupes <- Diagn_clean %>%
group_by(research_case_id) %>%
filter(n() > 1)
print(paste("Number of duplicate patient entries:", nrow(dupes)))
names <- Diagn_clean %>% filter(display_name != name) %>% select(display_name, name) %>% unique()
names[1:10,]
#Drop variable name
Diagn_clean <- Diagn_clean %>%
select(-name)
#Aggregates each patient to have a better df
Diagnosis_cleaned <- Diagn_clean %>%
group_by(research_case_id) %>%
summarize(
date = first(date),  # Keep the first date for each individual
bleeding = max(bleeding == 1, na.rm = TRUE),
fracture = max(fracture == 1, na.rm = TRUE),
subdural_bleeding = max(subdural_bleeding == 1, na.rm = TRUE),
epidural_bleeding = max(epidural_bleeding == 1, na.rm = TRUE),
subarachnoid_bleeding = max(subarachnoid_bleeding == 1, na.rm = TRUE),
contusion = max(contusion == 1, na.rm = TRUE),
diffuse_brain_injuries_and_ripping_shearing = max(diffuse_brain_injuries_and_ripping_shearing == 1, na.rm = TRUE),
other_bleeding = max(other_bleeding == 1, na.rm = TRUE),
skull_base_fracture = max(skull_base_fracture == 1, na.rm = TRUE),
skull_cap_fracture = max(skull_cap_fracture == 1, na.rm = TRUE),
unconsciousness = max(unconsciousness == 1, na.rm = TRUE),
concussion = max(concussion == 1, na.rm = TRUE),
brain_edema = max(brain_edema == 1, na.rm = TRUE),
brain_compression = max(brain_compression == 1, na.rm = TRUE),
concussion_correction_formula = max(concussion_correction_formula == 1, na.rm = TRUE),
concussion_correction_including_unconsciousness_in_tbi = max(concussion_correction_including_unconsciousness_in_tbi == 1, na.rm = TRUE),
injury_descriptions = paste(unique(display_name), collapse = ", "),  # Concatenate unique injury descriptions
num_injuries = n_distinct(display_name)  # Count distinct injury descriptions (new col)
)
# Convert binary variables to factors (we could also to logical if we wwant)
Diagnosis_cleaned$bleeding <- as.factor(Diagnosis_cleaned$bleeding)
Diagnosis_cleaned$fracture <- as.factor(Diagnosis_cleaned$fracture)
Diagnosis_cleaned$subdural_bleeding <- as.factor(Diagnosis_cleaned$subdural_bleeding)
Diagnosis_cleaned$epidural_bleeding <- as.factor(Diagnosis_cleaned$epidural_bleeding)
Diagnosis_cleaned$contusion <- as.factor(Diagnosis_cleaned$contusion)
Diagnosis_cleaned$other_bleeding <- as.factor(Diagnosis_cleaned$other_bleeding)
Diagnosis_cleaned$skull_base_fracture <- as.factor(Diagnosis_cleaned$skull_base_fracture)
Diagnosis_cleaned$skull_cap_fracture <- as.factor(Diagnosis_cleaned$skull_cap_fracture)
Diagnosis_cleaned$concussion <- as.factor(Diagnosis_cleaned$concussion)
Diagnosis_cleaned$brain_edema <- as.factor(Diagnosis_cleaned$brain_edema)
Diagnosis_cleaned$brain_compression <- as.factor(Diagnosis_cleaned$brain_compression)
Diagnosis_cleaned$concussion_correction_formula <- as.factor(Diagnosis_cleaned$concussion_correction_formula)
Diagnosis_cleaned$concussion_correction_including_unconsciousness_in_tbi <- as.factor(Diagnosis_cleaned$concussion_correction_including_unconsciousness_in_tbi)
Diagnosis_cleaned$unconsciousness <- as.factor(Diagnosis_cleaned$unconsciousness)
Diagnosis_cleaned$subarachnoid_bleeding <- as.factor(Diagnosis_cleaned$subarachnoid_bleeding)
Diagnosis_cleaned$diffuse_brain_injuries_and_ripping_shearing <- as.factor(Diagnosis_cleaned$diffuse_brain_injuries_and_ripping_shearing)
#save the df
save(Diagnosis_cleaned,
file = paste0(clean_path, "Diagnosis_cleaned.RData"))
